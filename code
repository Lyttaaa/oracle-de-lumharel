import discord
from discord.ext import commands
import asyncio
from datetime import datetime, timedelta
from pymongo import MongoClient
import os

# Configuration du bot
intents = discord.Intents.default()
intents.members = True
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# Connexion à MongoDB
mongo_uri = "mongodb+srv://lumharelbot:02536917@lumes.vpmi0.mongodb.net/?retryWrites=true&w=majority&appName=Lumes"
client = MongoClient(mongo_uri)
db = client.lumharel_bot
database = db.utilisateurs

# Commande !bourse
@bot.command()
async def bourse(ctx):
    user_id = str(ctx.author.id)
    user_data = database.find_one({"_id": user_id})
    if not user_data:
        database.insert_one({"_id": user_id, "pseudo": ctx.author.name, "lumes": 0, "derniere_offrande": {}, "roles_temporaires": {}})
        user_data = database.find_one({"_id": user_id})

    await ctx.send(f"💰 {ctx.author.mention}, tu possèdes actuellement **{user_data['lumes']} Lumes**.")

# Gérer les réactions pour les offrandes et les prières
@bot.event
async def on_raw_reaction_add(payload):
    if payload.member.bot:
        return

    channel = bot.get_channel(payload.channel_id)
    message = await channel.fetch_message(payload.message_id)

    emoji = str(payload.emoji)
    user = payload.member
    user_id = str(user.id)

    offrandes = {
        "Orrak": ["🍃", "🌰", "🌳", "🌿"],
        "Vaek": ["🔥", "🔨", "🔧", "🧱"],
        "Nhyara": ["💨", "🎐", "🌬️", "💫"],
        "Zeroth": ["⚰️", "🕸️", "🖤", "🪦"],
        "Aëldis": ["❄️", "🧊", "🌙", "☁️"]
    }

    prieres = {
        "🌿": "Béni·e par la Terre",
        "🔥": "Marqué·e par la Flamme",
        "🌪️": "Guidé·e par les Vents",
        "🌑": "Voilé·e par les Ombres",
        "❄️": "Porté·e par le Silence"
    }

    now = datetime.utcnow()
    today = now.strftime("%Y-%m-%d")

    user_data = database.find_one({"_id": user_id})
    if not user_data:
        database.insert_one({"_id": user_id, "pseudo": user.name, "lumes": 0, "derniere_offrande": {}, "roles_temporaires": {}})
        user_data = database.find_one({"_id": user_id})

    for divinite, emojis in offrandes.items():
        if emoji in emojis:
            derniere = user_data.get("derniere_offrande", {}).get(divinite, "")
            if derniere == today:
                return  # Offrande déjà faite aujourd'hui
            database.update_one({"_id": user_id}, {
                "$set": {f"derniere_offrande.{divinite}": today},
                "$inc": {"lumes": 3}
            })
            temp_msg = await channel.send(f"🎁 Une offrande a été faite à **{divinite}**. Les esprits murmurent leur gratitude à {user.mention}. (+3 Lumes)")
            await asyncio.sleep(30)
            await temp_msg.delete()
            return

    if emoji in prieres:
        role_name = prieres[emoji]
        role = discord.utils.get(user.guild.roles, name=role_name)
        if not role:
            role = await user.guild.create_role(name=role_name)
        await user.add_roles(role)

        database.update_one({"_id": user_id}, {"$set": {f"roles_temporaires.{role_name}": now.isoformat()}})

        temp_msg = await channel.send(f"✨ {user.mention} a reçu la bénédiction : **{role_name}**.")
        await asyncio.sleep(30)
        await temp_msg.delete()

# Nettoyage des rôles temporaires
@bot.event
async def on_ready():
    async def check_roles():
        await bot.wait_until_ready()
        while not bot.is_closed():
            now = datetime.utcnow()
            for guild in bot.guilds:
                for member in guild.members:
                    if member.bot:
                        continue
                    user_id = str(member.id)
                    user_data = database.find_one({"_id": user_id})
                    if user_data:
                        roles_temp = user_data.get("roles_temporaires", {})
                        to_remove = []
                        for role_name, timestamp in roles_temp.items():
                            assigned_time = datetime.fromisoformat(timestamp)
                            if now - assigned_time > timedelta(hours=24):
                                role = discord.utils.get(guild.roles, name=role_name)
                                if role in member.roles:
                                    await member.remove_roles(role)
                                    to_remove.append(role_name)
                        for r in to_remove:
                            database.update_one({"_id": user_id}, {"$unset": {f"roles_temporaires.{r}": ""}})
            await asyncio.sleep(3600)

    bot.loop.create_task(check_roles())

# Lancement du bot
bot.run("DISCORD_TOKEN")
